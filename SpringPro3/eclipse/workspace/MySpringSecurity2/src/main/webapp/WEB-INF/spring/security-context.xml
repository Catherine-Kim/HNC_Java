<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd">

	<!-- 권한 등록 -->
	<security:http auto-config="true" use-expressions="true">		
		<!-- access="hasRole('ROLE_ADMIN')" : ROLE_ADMIN일 경우-->
		<security:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')"/>
		
		<!-- access="hasRole('ROLE_MANAGER')" : ROLE_MANAGER일 경우-->
		<security:intercept-url pattern="/manager/**" access="hasRole('ROLE_MANAGER')"/>
		
		<!-- access="isAuthenticated()" : 뭐든간에 인증이 된 경우 -->
		<security:intercept-url pattern="/member/**" access="isAuthenticated()"/>
		
		<!-- access="permitAll" : 개나소나 다 가능 -->
		<security:intercept-url pattern="/**" access="permitAll"/>
	</security:http>
	
	<!-- 각 권한에 대한 인증 방법 등록 -->
	<security:authentication-manager>
		<security:authentication-provider>
			<security:user-service>
				<!-- ROLE_MANAGER : name - manager(ID가 manager인 것), password - 1234 -->
				<security:user name="manager" password="1234" authorities="ROLE_MANAGER"/>
				
				<!-- ROLE_ADMIN : name - admin11(ID가 admin11인 것), password - 1234 -->
				<security:user name="admin11" password="1234" authorities="ROLE_MANAGER,ROLE_MANAGER"/>
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager>
</beans>
